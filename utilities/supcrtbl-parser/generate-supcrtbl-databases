#!/usr/bin/env python3

# Reaktoro is a unified framework for modeling chemically reactive systems.
#
# Copyright © 2014-2022 Allan Leal
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library. If not, see <http://www.gnu.org/licenses/>.

# Execute:
#
#   generate-supcrtbl-databases -i supcrtbl.dat -ojson supcrtbl.json -oyaml supcrtbl.yaml
#
# to parse the database file supcrtbl.dat and generate files supcrtbl.json and supcrtbl.yaml.

import sys
import argparse
import json
import oyaml as yaml

from supcrtbl_customization import (
    supcrtbl_customized_species_name,
    supcrtbl_organic_species
)

# Auxiliary constants
kJ_to_J = 1e3
bar_to_Pa = 1e5
kbar_to_Pa = 1e8


def strdict(d):
    """Auxiliary function used to get single-line dictionaries in  json/yaml"""
    return f"&{d}&"


def cleanFormulaFromOnes(formula):
    """Replace formulas such as Ca1C1O3 into CaCO3 (by removing 1)

    Args:
        formula (str): The chemical formula of a species
    """
    newformula = formula[0]
    for i in range(1, len(formula) - 1):
        if formula[i] == '1' and formula[i - 1].isalpha() and formula[i + 1].isalpha():
            continue
        else: newformula += formula[i]
    if formula[-1] != '1':
        newformula += formula[-1]
    return newformula


def groupLinesBySection(lines):
    """Group the list of lines according to their sections:
         * minerals that do not undergo phase transitions
         * minerals that use Landau theory
         * minerals that use Bragg-Williams theory
         * gas species
         * aqueous species

    Args:
        lines (list(str)): The lines of the database file.

    Returns:
        list(list(str)): The lines grouped according to the sections above.
    """
    isection1 = 0  # minerals that do not undergo phase transitions
    isection2 = 0  # minerals that use Landau theory
    isection3 = 0  # minerals that use Bragg-Williams theory
    isection4 = 0  # gas species
    isection5 = 0  # aqueous species

    isection1end = 0
    isection2end = 0
    isection3end = 0
    isection4end = 0
    isection5end = 0

    for i, line in enumerate(lines):
        if "minerals that do not undergo phase transitions" in line:
            isection1 = i + 2
            continue
        if "minerals that use Landau theory" in line:
            isection2 = i + 2
            continue
        if "minerals that use Bragg-Williams theory" in line:
            isection3 = i + 2
            continue
        if "gas species" in line:
            isection4 = i + 2
            continue
        if "aqueous species" in line:
            isection5 = i + 2
            continue
        if "***************" in line:
            if isection1 != 0 and i > isection1 and isection1end == 0: isection1end = i; continue
            if isection2 != 0 and i > isection2 and isection2end == 0: isection2end = i; continue
            if isection3 != 0 and i > isection3 and isection3end == 0: isection3end = i; continue
            if isection4 != 0 and i > isection4 and isection4end == 0: isection4end = i; continue
        if line.strip() == "":
            if isection5 != 0 and isection5end == 0: isection5end = i; break

    return [ lines[isection1:isection1end],
             lines[isection2:isection2end],
             lines[isection3:isection3end],
             lines[isection4:isection4end],
             lines[isection5:isection5end] ]


def parseElementsToDict(word):
    """Parse a string such as "Fe(3)Al(2)Si(3)O(12)" to extract element symbols and coefficients

    Applying this method in the following strings produce the corresponding results:
        * "Ca(1)C(1)O(3)" produces { "Ca": 1, "C": 1, "O": 3 }
        * "Ag(1)+(2)"     produces { "Ag": 1, "E": -2 }
        * "Cl(1)-(1)"     produces { "Cl": 1, "E": 1 }
    where E above denotes an "element" symbol to represent electron.

    Args:
        word (str): The string containing the elemental formula of a substance

    Returns:
        dict: A dictionary containing the element symbols and their coefficients.
    """
    # Split the elemental formula in words delimited by ( or )
    words = word.replace(")", "(").split("(")  # split on ( or )
    words = [x for x in words if x != ""]  # remove empty string ""

    # Check if the elemental formula contains only one element
    if len(words) == 1:
        return [ words[0] ], [ 1 ]

    # Collect the pairs (element, coefficient) in the list of elements
    elements = []
    coefficients = []
    for i in range(0, len(words), 2):
        symbol = words[i]
        number = float(words[i + 1])
        if symbol in ["+", "-"]:  # check if element is charge + or -
            break
        elements.append(symbol)
        coefficients.append(number)

    return strdict({ element: coeff for element, coeff in zip(elements, coefficients) })


def parseElements(word):
    """Parse a string such as "Fe(3)Al(2)Si(3)O(12)" to extract element symbols and coefficients

    Applying this method in the following strings produce the corresponding results:
        * H(2)O(1)      produces 2:H 1:O
        * Ca(1)C(1)O(3) produces 1:Ca 1:C 3:O
        * Ag(1)+(2)     produces 1:Ag
        * Cl(1)-(1)     produces 1:Cl
    where E above denotes an "element" symbol to represent electron.

    Args:
        word (str): The string containing the elemental formula of a substance

    Returns:
        str: A string containing the element symbols and their coefficients.
    """
    # Split the elemental formula in words delimited by ( or )
    words = word.replace(")", "(").split("(")  # split on ( or )
    words = [x for x in words if x != ""]  # remove empty string ""

    # Check if the elemental formula contains only one element
    if len(words) == 1:
        return f"1:{words[0]}"

    # Collect the pairs (element, coefficient) in the list of elements
    res = ""
    for i in range(0, len(words), 2):
        symbol = words[i]
        number = words[i + 1]
        if symbol in ["+", "-"]:  # check if symbol is charge sign + or -
            break
        res += f"{number}:{symbol} "

    return res[:-1]


def parseCharge(word):
    """Parse a string such as "Fe(1)C(5)H(9)O(2)+(1)" to extract electric charge

    Args:
        word (str): The string containing the elemental formula of a substance.

    Returns:
        float: The electric charge of the species.
    """
    i = word.find('-(')
    if i != -1:
        return -float(word[i + 2:-1])
    else:
        i = word.find('+(')
        if i != -1:
            return float(word[i + 2:-1])
        else: return 0.0


def determineSpeciesName(originalname):
    return supcrtbl_customized_species_name.get(originalname, originalname)


def determineTags(originalname):
    tags = ""
    if originalname in supcrtbl_organic_species:
        tags += "organic "
    return tags.strip()


def getCommonSpeciesData(lines):
    assert(len(lines) == 3)
    data = {}
    originalname = lines[0][:21].strip()
    data["Name"] = determineSpeciesName(originalname)
    data["Formula"] = cleanFormulaFromOnes(lines[0][21:].strip())
    data["Abbrev"] = lines[1][:21].strip()
    data["Elements"] = parseElements(lines[1][21:].strip())
    data["Charge"] = parseCharge(lines[1][21:].strip())
    data["Reference"] = lines[2][:21].strip()
    data["Date"] = lines[2][21:].strip()
    data["Tags"] = determineTags(originalname)
    if data["Tags"] == "": data.pop("Tags")
    return data


def getParamsMineralHollandPowell(lines):
    assert(len(lines) == 4)
    line = "".join(lines)
    numbers = line.strip().split()
    numbers = [float(x) if x != "999.9999" else float("nan") for x in numbers]
    assert(len(numbers) == 14)
    params = {}
    params["Model"]    = "HollandPowell"
    params["Gf"]       = numbers[0]   # in kJ/mol
    params["Hf"]       = numbers[1]   # in kJ/mol
    params["Sr"]       = numbers[2]   # in J/(mol·K)
    params["Vr"]       = numbers[3]   # in J/bar
    params["a"]        = numbers[4]   # in kJ/mol/K
    params["b"]        = numbers[5]   # in kJ/(mol·K²) (multiplied by 1e+5)
    params["c"]        = numbers[6]   # in kJ·K/mol
    params["d"]        = numbers[7]   # in kJ/(mol·K½)
    params["alpha0"]   = numbers[8]   # in 1/K (multiplied by 1e+5)
    params["kappa0"]   = numbers[9]   # in kbar
    params["kappa0p"]  = numbers[10]  # dimensionless
    params["kappa0pp"] = numbers[11]  # in 1/kbar
    params["numatoms"] = numbers[12]  # dimensionless
    params["Tmax"]     = numbers[13]  # in K
    # Convert above parameters to SI units
    params["Gf"]       *= kJ_to_J        # from kJ/mol to J/mol
    params["Hf"]       *= kJ_to_J        # from kJ/mol to J/mol
    params["Sr"]       *= 1.0            # from J/(mol·K) to J/(mol·K)
    params["Vr"]       *= 1.0/bar_to_Pa  # from J/bar to J/Pa
    params["a"]        *= kJ_to_J        # from kJ/mol/K to J/mol/K
    params["b"]        *= kJ_to_J/1e+5   # from kJ/(mol·K²) to J/(mol·K²) (without 1e+5 factor!)
    params["c"]        *= kJ_to_J        # from kJ·K/mol to J·K/mol
    params["d"]        *= kJ_to_J        # from kJ/(mol·K½) to J/(mol·K½)
    params["alpha0"]   *= 1.0/1e+5       # from 1/K to 1/K (without 1e+5 factor!)
    params["kappa0"]   *= kbar_to_Pa     # from kbar to Pa
    params["kappa0p"]  *= 1.0            # dimensionless
    params["kappa0pp"] *= 1.0/kbar_to_Pa # from 1/kbar to 1/Pa
    return params


def getParamsMineralHollandPowellLandau(lines):
    assert(len(lines) == 5)
    line = "".join(lines)
    numbers = line.strip().split()
    numbers = [float(x) if x != "999.9999" else float("nan") for x in numbers]
    assert(len(numbers) == 17)
    params = {}
    params["Model"]    = "HollandPowell"
    params["Gf"]       = numbers[0]   # in kJ/mol
    params["Hf"]       = numbers[1]   # in kJ/mol
    params["Sr"]       = numbers[2]   # in J/(mol·K)
    params["Vr"]       = numbers[3]   # in J/bar
    params["a"]        = numbers[4]   # in kJ/mol/K
    params["b"]        = numbers[5]   # in kJ/(mol·K²) (multiplied by 1e+5)
    params["c"]        = numbers[6]   # in kJ·K/mol
    params["d"]        = numbers[7]   # in kJ/(mol·K½)
    params["alpha0"]   = numbers[8]   # in 1/K (multiplied by 1e+5)
    params["kappa0"]   = numbers[9]   # in kbar
    params["kappa0p"]  = numbers[10]  # dimensionless
    params["kappa0pp"] = numbers[11]  # in 1/kbar
    params["numatoms"] = numbers[12]  # dimensionless
    params["Tcr"]      = numbers[13]  # in K
    params["Smax"]     = numbers[14]  # in J/mol/K
    params["Vmax"]     = numbers[15]  # in J/bar
    params["Tmax"]     = numbers[16]  # in K
    # Convert above parameters to SI units
    params["Gf"]       *= kJ_to_J        # from kJ/mol to J/mol
    params["Hf"]       *= kJ_to_J        # from kJ/mol to J/mol
    params["Sr"]       *= 1.0            # from J/(mol·K) to J/(mol·K)
    params["Vr"]       *= 1.0/bar_to_Pa  # from J/bar to J/Pa
    params["a"]        *= kJ_to_J        # from kJ/mol/K to J/mol/K
    params["b"]        *= kJ_to_J/1e+5   # from kJ/(mol·K²) to J/(mol·K²) (without 1e+5 factor!)
    params["c"]        *= kJ_to_J        # from kJ·K/mol to J·K/mol
    params["d"]        *= kJ_to_J        # from kJ/(mol·K½) to J/(mol·K½)
    params["alpha0"]   *= 1.0/1e+5       # from 1/K to 1/K (without 1e+5 factor!)
    params["kappa0"]   *= kbar_to_Pa     # from kbar to Pa
    params["kappa0p"]  *= 1.0            # dimensionless
    params["kappa0pp"] *= 1.0/kbar_to_Pa # from 1/kbar to 1/Pa
    params["Vmax"]     *= 1/bar_to_Pa    # from J/bar to J/Pa

    return params


def getParamsMineralHollandPowellBraggWilliams(lines):
    assert(len(lines) == 5)
    line = "".join(lines)
    numbers = line.strip().split()
    numbers = [float(x) if x != "999.9999" else float("nan") for x in numbers]
    assert(len(numbers) == 20)
    params = {}
    params["Model"]     = "HollandPowell"
    params["Gf"]        = numbers[0]   # in kJ/mol
    params["Hf"]        = numbers[1]   # in kJ/mol
    params["Sr"]        = numbers[2]   # in J/(mol·K)
    params["Vr"]        = numbers[3]   # in J/bar
    params["a"]         = numbers[4]   # in kJ/mol/K
    params["b"]         = numbers[5]   # in kJ/(mol·K²) (multiplied by 1e+5)
    params["c"]         = numbers[6]   # in kJ·K/mol
    params["d"]         = numbers[7]   # in kJ/(mol·K½)
    params["alpha0"]    = numbers[8]   # in 1e5/K
    params["kappa0"]    = numbers[9]   # in kbar
    params["kappa0p"]   = numbers[10]  # dimensionless
    params["kappa0pp"]  = numbers[11]  # in 1/kbar
    params["numatoms"]  = numbers[12]  # dimensionless
    # params["unknonwn0"] = numbers[13]  # in ??? Needs to be checked with Chen Zhu...
    # params["unknonwn1"] = numbers[14]  # in ??? Needs to be checked with Chen Zhu...
    # params["unknonwn2"] = numbers[15]  # in ??? Needs to be checked with Chen Zhu...
    # params["unknonwn3"] = numbers[16]  # in ??? Needs to be checked with Chen Zhu...
    # params["unknonwn4"] = numbers[17]  # in ??? Needs to be checked with Chen Zhu...
    # params["unknonwn5"] = numbers[18]  # in ??? Needs to be checked with Chen Zhu...
    params["Tmax"]      = numbers[19]  # in K
    # Convert above parameters to SI units
    params["Gf"]       *= kJ_to_J        # from kJ/mol to J/mol
    params["Hf"]       *= kJ_to_J        # from kJ/mol to J/mol
    params["Sr"]       *= 1.0            # from J/(mol·K) to J/(mol·K)
    params["Vr"]       *= 1.0/bar_to_Pa  # from J/bar to J/Pa
    params["a"]        *= kJ_to_J        # from kJ/mol/K to J/mol/K
    params["b"]        *= kJ_to_J/1e+5   # from kJ/(mol·K²) to J/(mol·K²) (without 1e+5 factor!)
    params["c"]        *= kJ_to_J        # from kJ·K/mol to J·K/mol
    params["d"]        *= kJ_to_J        # from kJ/(mol·K½) to J/(mol·K½)
    params["alpha0"]   *= 1.0/1e+5       # from 1/K to 1/K (without 1e+5 factor!)
    params["kappa0"]   *= kbar_to_Pa     # from kbar to Pa
    params["kappa0p"]  *= 1.0            # dimensionless
    params["kappa0pp"] *= 1.0/kbar_to_Pa # from 1/kbar to 1/Pa
    return params


def getParamsGaseousSpecies(lines):
    assert(len(lines) == 3)
    line = "".join(lines)
    numbers = line.strip().split()
    numbers = [float(x) if x != "999.9999" else float("nan") for x in numbers]
    assert(len(numbers) == 9)
    params = {}
    params["Model"] = "HollandPowell"
    params["Gf"]    = numbers[0]  # in kJ/mol
    params["Hf"]    = numbers[1]  # in kJ/mol
    params["Sr"]    = numbers[2]  # in J/(mol·K)
    params["Vr"]    = numbers[3]  # in J/bar
    params["a"]     = numbers[4]  # in kJ/(mol·K)
    params["b"]     = numbers[5]  # in kJ/(mol·K²) (multiplied by 1e+5)
    params["c"]     = numbers[6]  # in (kJ·K)/mol
    params["d"]     = numbers[7]  # in kJ/(mol·K½)
    params["Tmax"]  = numbers[8]  # in K
    # Convert above parameters to SI units
    params["Gf"]   *= kJ_to_J        # from kJ/mol to J/mol
    params["Hf"]   *= kJ_to_J        # from kJ/mol to J/mol
    params["Sr"]   *= 1.0            # from J/(mol·K) to J/(mol·K)
    params["Vr"]   *= 1.0/bar_to_Pa  # from J/bar to J/Pa
    params["a"]    *= kJ_to_J        # from kJ/mol/K to J/mol/K
    params["b"]    *= kJ_to_J/1e+5   # from kJ/(mol·K²) to J/(mol·K²) (without 1e+5 factor!)
    params["c"]    *= kJ_to_J        # from kJ·K/mol to J·K/mol
    params["d"]    *= kJ_to_J        # from kJ/(mol·K½) to J/(mol·K½)
    return params


def getParamsAqueousSolute(lines):
    assert(len(lines) == 3)
    line = "".join(lines)
    numbers = line.strip().split()
    numbers = [float(x) if x != "999.9999" else float("nan") for x in numbers]
    assert(len(numbers) == 11)
    params = {}
    params["Model"]  = "HKF"
    params["Gf"]     = numbers[0]  # in kJ/mol
    params["Hf"]     = numbers[1]  # in kJ/mol
    params["Sr"]     = numbers[2]  # in J/(mol·K)
    params["a1"]     = numbers[3]  # in J/(mol·bar) (multiplied by 10)
    params["a2"]     = numbers[4]  # in J/mol (multiplied by 1e-2)
    params["a3"]     = numbers[5]  # in (J·K)/(mol·bar)
    params["a4"]     = numbers[6]  # in (J·K)/mol (multiplied by 1e-4)
    params["c1"]     = numbers[7]  # in J/(mol·K)
    params["c2"]     = numbers[8]  # in (J·K)/mol (multiplied by 1e-4)
    params["wref"]   = numbers[9]  # in J/mol (multiplied by 1e-5)
    params["charge"] = numbers[10] # dimensionless
    # Convert above parameters to SI units
    params["Gf"]   *= kJ_to_J           # from kJ/mol to J/mol
    params["Hf"]   *= kJ_to_J           # from kJ/mol to J/mol
    params["Sr"]   *= 1.0               # from J/(mol·K) to J/(mol·K)
    params["a1"]   *= 1.0/bar_to_Pa/10  # from J/(mol·bar) to J/(mol·Pa) (without 10 factor!)
    params["a2"]   *= 1.0/1e-2          # from J/mol to J/mol (without 1e-2 factor!)
    params["a3"]   *= 1.0/bar_to_Pa     # from (J·K)/(mol·bar) to (J·K)/(mol·Pa)
    params["a4"]   *= 1.0/1e-4          # from (J·K)/mol to (J·K)/mol (without 1e-4 factor!)
    params["c1"]   *= 1.0               # from J/(mol·K) to J/(mol·K)
    params["c2"]   *= 1.0/1e-4          # from (J·K)/mol to (J·K)/mol (without 1e-4 factor!)
    params["wref"] *= 1.0/1e-5          # from J/mol to J/mol (without 1e-5 factor!)
    return params


def getMineralSpeciesData(lines, group):
    data = getCommonSpeciesData(lines[:3])
    data["AggregateState"] = "Solid"
    if group == 1: # minerals that do not undergo phase transitions
        data["Params"] = getParamsMineralHollandPowell(lines[3:])
    if group == 2: # minerals that use Landau theory
        data["Params"] = getParamsMineralHollandPowellLandau(lines[3:])
    if group == 3: # minerals that use Bragg-Williams theory
        data["Params"] = getParamsMineralHollandPowellBraggWilliams(lines[3:])
    if data["Params"]["kappa0"] == 0.0:
        data["Params"].pop("alpha0")
        data["Params"].pop("kappa0")
        data["Params"].pop("kappa0p")
        data["Params"].pop("kappa0pp")
        data["Params"].pop("numatoms")

    return data


def getGaseousSpeciesData(lines):
    data = getCommonSpeciesData(lines[:3])
    data["AggregateState"] = "Gas"
    data["Params"] = getParamsGaseousSpecies(lines[3:])
    return data


def getAqueousSoluteData(lines):
    data = getCommonSpeciesData(lines[:3])
    data["AggregateState"] = "Aqueous"
    data["Params"] = getParamsAqueousSolute(lines[3:])
    return data


def createMineralsWithoutPhaseTransitions(lines):
    assert(len(lines) % 7 == 0)
    minerals = []
    for i in range(0, len(lines), 7):
        minerals.append(getMineralSpeciesData(lines[i:i + 7], 1))
    return minerals


def createMineralsWithPhaseTransitionsLandau(lines):
    assert(len(lines) % 8 == 0)
    minerals = []
    for i in range(0, len(lines), 8):
        minerals.append(getMineralSpeciesData(lines[i:i + 8], 2))
    return minerals


def createMineralsWithPhaseTransitionsBraggWilliams(lines):
    assert(len(lines) % 8 == 0)
    minerals = []
    for i in range(0, len(lines), 8):
        minerals.append(getMineralSpeciesData(lines[i:i + 8], 3))
    return minerals


def createGaseousSpecies(lines):
    assert(len(lines) % 6 == 0)
    gases = []
    for i in range(0, len(lines), 6):
        gases.append(getGaseousSpeciesData(lines[i:i + 6]))
    return gases


def createAqueousSolutes(lines):
    assert(len(lines) % 6 == 0)
    solutes = []
    for i in range(0, len(lines), 6):
        solutes.append(getAqueousSoluteData(lines[i:i + 6]))
    return solutes


def createAqueousSolvent():
    data = {}
    data["Name"] = "H2O(aq)"
    data["Formula"] = "H2O"
    data["Elements"] = "2:H 1:O"
    data["Charge"] = 0.0
    data["AggregateState"] = "Aqueous"
    data["Params"] = {}
    data["Params"]["Model"] = "WaterHKF"
    data["Params"]["Ttr"] = 273.16
    data["Params"]["Ttr"] = 273.16
    data["Params"]["Str"] = 63.312288
    data["Params"]["Gtr"] = -235517.36
    data["Params"]["Htr"] = -287721.13
    data["Abbrev"] = ""
    data["Date"] = ""
    data["Reference"] = ""
    return [data]


def createSpecies(groups):
    assert(len(groups) == 5)
    return \
        createMineralsWithoutPhaseTransitions(groups[0]) + \
        createMineralsWithPhaseTransitionsLandau(groups[1]) + \
        createMineralsWithPhaseTransitionsBraggWilliams(groups[2]) + \
        createGaseousSpecies(groups[3]) + \
        createAqueousSolvent() + \
        createAqueousSolutes(groups[4])


def createDatabase(species):
    for obj in species:
        obj.pop("Abbrev")
        obj.pop("Reference")
        obj.pop("Date")
        if obj["AggregateState"] != "Aqueous" and obj["Charge"] == 0.0:
            obj.pop("Charge")
        params = obj.pop("Params")
        modelname = params.pop("Model")
        model = obj["StandardThermoModel"] = {}
        model[modelname] = params
        if "charge" in params:
            params["charge"] = obj["Charge"]  # there are charge inconsistencies in SUPCRTBL -- use the charge from the elemental formula in the HKF block

    species = [organizeSpeciesDataBlock(x) for x in species]
    db = { "Species": species }
    return db


def replaceNaNs(o):
    """Recursivelly replace NaN values to 9999999999999999 (16 digits)
    The reason for this is because json do not support NaN and Inf.
    It supports null, but parsing null nodes into numbers leads to runtime errors.
    """
    if isinstance(o, float): return o if o == o else 9999999999999999
    if isinstance(o, dict): return {k: replaceNaNs(v) for k, v in o.items()}
    if isinstance(o, (list, tuple)): return [replaceNaNs(x) for x in o]
    return o


def roundFloats(o, sigfigures=8):
    """Recursivelly round float numbers in an object to given significant figures

    Args:
        o (object): The object within which all float values are rounded.
        sigfigures (int, optional): The number of significant figures. Defaults to 8.

    Returns:
        object: The given objected with all float values rounded
    """
    n = sigfigures
    if isinstance(o, float): return float(f'%.{n}g' % o)
    if isinstance(o, dict): return {k: roundFloats(v, n) for k, v in o.items()}
    if isinstance(o, (list, tuple)): return [roundFloats(x, n) for x in o]
    return o


def organizeSpeciesDataBlock(species):
    """Ensure a certain ordering in the YAML nodes of species"""
    newspecies = {}
    newspecies["Name"] = species["Name"]
    newspecies["Formula"] = species["Formula"]
    newspecies["Elements"] = species["Elements"]
    if "Charge" in species: newspecies["Charge"] = species["Charge"]
    if "Tags" in species: newspecies["Tags"] = species["Tags"]
    newspecies["AggregateState"] = species["AggregateState"]
    newspecies["StandardThermoModel"] = species["StandardThermoModel"]
    return newspecies


if __name__ == "__main__":
    # Create a command-line argument parser
    parser = argparse.ArgumentParser(prog="ReaktoroParserSUPCRTBL")

    # Add the input argument
    parser.add_argument("-i", "--input", type=str, \
        help="the path to the original SUPCRTBL database file",
        required=True)

    # Add the output argument for json
    parser.add_argument("-ojson", "--outputjson", type=str, \
        help="the path where the json file should be the output",
        required=True)

    # Add the output argument for yaml
    parser.add_argument("-oyaml", "--outputyaml", type=str, \
        help="the path where the yaml file should be the output",
        required=True)

    # Add the debug option (optional)
    # parser.add_argument("-e", "--exclude", type=str, nargs="?", \
    #     help="the relative path to a file containing the names of species \
    #         to be excluded from the final database")

    # Parse the command-line arguments (remove the first argument, which is the name of this file
    args = parser.parse_args(sys.argv[1:])

    with open(args.input) as f:
        content = f.readlines()

    groups = groupLinesBySection(content)
    species = createSpecies(groups)
    db = createDatabase(species)

    # Preserve only 8 significant figures in the float numbers
    db = roundFloats(db, sigfigures=8)

    # Perform a json dump
    jdump = json.dumps(db, sort_keys=False, indent=2, separators=(',', ': '))

    # Perform a yaml dump
    ydump = yaml.dump(db)

    # Clean both json and yaml dumps from, for example, @ surrounding dictionaries (e.g., &{...}&)
    jdump = jdump.replace("\"&{", "{ ").replace("}&\"", " }").replace("'", "\"")
    ydump = ydump.replace("&{", "{ ").replace("}&", " }").replace("'", "")

    # Output the database in json format
    with open(args.outputjson, 'w') as f:
        print(f"Creating ouptut file {args.outputjson} ...")
        f.write(jdump)

    # Output the database in yaml format
    with open(args.outputyaml, 'w') as f:
        print(f"Creating ouptut file {args.outputyaml} ...")
        f.write(ydump)

    print(f"Files {args.outputjson} and {args.outputyaml} have been successfully written!")
