// Reaktoro is a unified framework for modeling chemically reactive systems.
//
// Copyright Â© 2014-2022 Allan Leal
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library. If not, see <http://www.gnu.org/licenses/>.

#include "ActivityModelSorption.hpp"

// Reaktoro includes
#include <Reaktoro/Singletons/Elements.hpp>
#include <Reaktoro/Thermodynamics/Aqueous/AqueousProps.hpp>
#include <Reaktoro/Thermodynamics/Aqueous/AqueousMixture.hpp>
#include <Reaktoro/Thermodynamics/Surface/Surface.hpp>
#include <Reaktoro/Thermodynamics/Surface/SurfaceSite.hpp>

namespace Reaktoro {

using std::sqrt;
using std::log;

namespace detail {

/// Return the SorptionActivityModel object assuming no electrostatic effects are generated by the surface site.
auto activityModelSorptionNoDDL(const SpeciesList& species, ActivityModelSorptionParams params) -> ActivityModel
{
    // Create the complexation surface
    Surface surface = params.surface;

    // The charges of the surface species
    ArrayXd surface_z = surface.charges();

    // Create the complexation surface site
    SurfaceSite site = surface.sites()[params.site_tag];

    // The indices of site species
    auto indices = site.speciesIndices();

    // The state of the complexation surface and surface site
    SurfaceSiteState site_state;
    SurfaceState surface_state;

    // Define the activity model function of the surface complexation phase
    ActivityModel fn = [=](ActivityPropsRef props, ActivityArgs args) mutable
    {
        // The arguments for the activity model evaluation
        const auto& [T, P, x] = args;

        // Evaluate the state of the surface complexation site
        site_state = site.state(T, P, x);

        // If the AqueousPhase has been already evaluated, use the ionic strength to update the electrostatic potential
        if (props.extra["SurfaceState"].has_value())
        {
            // Export aqueous mixture state via `extra` data member
            surface_state = std::any_cast<SurfaceState>(props.extra["SurfaceState"]);
        }
        else
        {
            // Initialize surface state with given temperature and pressure
            surface_state = surface.state(T, P);
        }
        // Update surface fractions with calculated site's fractions and surface charge
        surface_state.updateFractions(x, indices);
        surface_state.updateCharge(surface_z);

        //std::cout << site.name() << ": " << "surface_state.x = " << surface_state.x.transpose() << std::endl;

        // If the AqueousPhase has been already evaluated, use the ionic strength to update the electrostatic potential
        if (props.extra["AqueousMixtureState"].has_value())
        {
            // Export aqueous mixture state via `extra` data member
            const auto& aqueous_state = std::any_cast<AqueousMixtureState>(props.extra["AqueousMixtureState"]);

            // Update surface potential using the ionic strength
            surface_state.updatePotential(aqueous_state.Is);
        }

        // Export the surface complexation, site and their states via the `extra` data member
        props.extra["Surface"] = surface;
        props.extra["SurfaceState"] = surface_state;
        props.extra["SurfaceSite" + site.name()] = site;
        props.extra["SurfaceSiteState" + site.name()] = site_state;

        // Calculate ln of activities of surfaces species as the ln of molar fractions
        props.ln_a = x.log();
    };

    return fn;
}

///// Return the SorptionActivityModel object updating the surface potential of the surface site (must be combined
///// with with activity model applied on the aqueous solution that is being influenced by these electrostatic effects).
//auto ActivityModelSorptionWithDDL(const SpeciesList& species, ActivityModelSorptionParams params) -> ActivityModel
//{
//    // Initialize the surface
//    Surface surface = params.surface;
//
//    // The charges of the surface species
//    ArrayXd surface_z = surface.charges();
//
//    // Initialize the surface site
//    SurfaceSite site = surface.sites()[params.site_tag];
//
//    // The indices of site species
//    auto indices = site.speciesIndices();
//
//    // The state of the surface and site
//    SurfaceSiteState site_state;
//    SurfaceState surface_state;
//
//    // Define the activity model function of the surface complexation site phase
//    ActivityModel fn = [=](ActivityPropsRef props, ActivityArgs args) mutable
//    {
//        // The arguments for the activity model evaluation
//        const auto& [T, P, x] = args;
//
//        // Evaluate the state of the surface complexation
//        site_state = site.state(T, P, x);
//
//        // Calculate ln of activities of surfaces species as the ln of molar fractions
//        props.ln_a = x.log();
//
//        // If the AqueousPhase has been already evaluated, use the ionic strength to update the electrostatic potential
//        if (props.extra["SurfaceState"].has_value())
//        {
//            // Export aqueous mixture state via `extra` data member
//            surface_state = std::any_cast<SurfaceState>(props.extra["SurfaceState"]);
//        }
//        else
//        {
//            // Initialize surface state with given temperature and pressure
//            surface_state = surface.state(T, P);
//        }
//        // Update surface fractions with calculated site's fractions and surface charge
//        surface_state.updateFractions(x, indices);
//        surface_state.updateCharge(surface_z);
//
//        // If the AqueousPhase has been already evaluated, use the ionic strength to update the electrostatic potential
//        if (props.extra["AqueousMixtureState"].has_value())
//        {
//            // Export aqueous mixture state via `extra` data member
//            const auto& aqueous_state = std::any_cast<AqueousMixtureState>(props.extra["AqueousMixtureState"]);
//
//            // Update surface potential using the ionic strength
//            surface_state.updatePotential(aqueous_state.Is);
//        }
//
//        // Export the surface complexation, site and their states via the `extra` data member
//        props.extra["Surface"] = surface;
//        props.extra["SurfaceState"] = surface_state;
//
//        props.extra["SurfaceSiteState" + site.name()] = site_state;
//        props.extra["SurfaceSite" + site.name()] = site;
//    };
//
//    return fn;
//}
//
///// Return the SorptionActivityModel object updating the surface potential of the surface site and applying
///// the electrostatic (coloumbic) corrections on the surface site species based on the Dzombak and Morel (1990) book.
//auto activityModelSorptionWithEDL(const SpeciesList& species, ActivityModelSorptionParams params) -> ActivityModel
//{
//    // Initialize the surface
//    Surface surface = params.surface;
//
//    // The charges of the surface species
//    ArrayXd surface_z = surface.charges();
//
//    // Initialize the surface site
//    SurfaceSite site = surface.sites()[params.site_tag];
//
//    // The charges of the site species
//    ArrayXd z = site.charges();
//
//    // The indices of site species
//    auto indices = site.speciesIndices();
//
//    // The state of the surface and site
//    SurfaceSiteState site_state;
//    SurfaceState surface_state;
//
//    // Define the activity model function of the surface complexation site phase
//    ActivityModel fn = [=](ActivityPropsRef props, ActivityArgs args) mutable
//    {
//        // The arguments for the activity model evaluation
//        const auto& [T, P, x] = args;
//
//        // Evaluate the state of the surface complexation
//        site_state = site.state(T, P, x);
//
//        // Calculate ln of activities of surfaces species as the ln of molar fractions
//        props.ln_a = x.log();
//
//        // If the AqueousPhase has been already evaluated, use the ionic strength to update the electrostatic potential
//        if (props.extra["SurfaceState"].has_value())
//        {
//            // Export aqueous mixture state via `extra` data member
//            surface_state = std::any_cast<SurfaceState>(props.extra["SurfaceState"]);
//
//            // Update surface fractions with calculated site's fractions and surface charge
//            surface_state.updateFractions(x, indices);
//            surface_state.updateCharge(surface_z);
//
//            // If the AqueousPhase has been already evaluated, use the ionic strength to update the electrostatic potential
//            if (props.extra["AqueousMixtureState"].has_value())
//            {
//                // Export aqueous mixture state via `extra` data member
//                const auto& aqueous_state = std::any_cast<AqueousMixtureState>(props.extra["AqueousMixtureState"]);
//
//                // Update surface potential using the ionic strength
//                surface_state.updatePotential(aqueous_state.Is);
//
//                // Update ln of activity and activity coefficients based on the Dzombak & Morel (1990), (2.13), (2.40)
//                props.ln_g = z*surface_state.psi*F/(R*T);
//                //props.ln_g = 2*z*asinh(surface_state.sigma/(0.1174*sqrt(aqueous_state.Is)));
//                //props.ln_g = 2*asinh(surface_state.sigma/(0.1174*sqrt(aqueous_state.Is)));
//
////            // Update ln of activity coefficients according to the Table 2.12 in Dzombak & Morel (1990)
////            auto eps = 78.4;        // the dielectric constant of water, C/(V*m)
////            auto eps0 = 8.854e-12;  // the permittivity of free space
////            auto kappa = F*sqrt(2*aqueous_state.Is*1e3/(eps*eps0*R*T)); // 1/kappa is the double-layer thickness, m
////            auto psi_GC = surface_state.sigma/(kappa*eps*eps0); // surface potential
////            props.ln_g = z*psi_GC*F/(R*T); // the activity coefficient of a surface species
//            }
//            props.ln_a += props.ln_g;
//        }
//        else
//        {
//            // Initialize surface state with given temperature and pressure
//            surface_state = surface.state(T, P);
//
//            // Update surface fractions with calculated site's fractions and surface charge
//            surface_state.updateFractions(x, indices);
//            surface_state.updateCharge(surface_z);
//        }
//
//        // Export the surface complexation, site and their states via the `extra` data member
//        props.extra["Surface"] = surface;
//        props.extra["SurfaceState"] = surface_state;
//
//        props.extra["SurfaceSiteState" + site.name()] = site_state;
//        props.extra["SurfaceSite" + site.name()] = site;
//    };
//
//    return fn;
//}
//
///// Return the activity model based on the Dzombak and Morel (1990) model applied on the aqueous solution in contact
///// with complexation surface.
//auto activityModelEDL(const SpeciesList& species, ActivityModelDDLParams params) -> ActivityModel
//{
//    // Create the aqueous ddl_mixture
//    AqueousMixture mixture(species);
//
//    // The array of the ionic species charges
//    ArrayXr z = mixture.charges();
//
//    // The ddl_state of the aqueous ddl_mixture
//    AqueousMixtureState aqueous_state;
//
//    // Define the activity model function of the surface complexation phase
//    ActivityModel fn = [=](ActivityPropsRef props, ActivityArgs args) mutable
//    {
//        // The arguments for the activity model evaluation
//        const auto& [T, P, x] = args;
//
//        // Evaluate the ddl_state of the aqueous ddl_mixture
//        aqueous_state = mixture.state(T, P, x);
//
//        // Export the surface complexation and its ddl_state via the `extra` data member
//        props.extra["AqueousMixtureState"] = aqueous_state;
//
//        // Add electrostatic correction if the surface complexation activity model has been already considered
//        if (props.extra["SurfaceState"].has_value()) {
//            // Export surface complexation state via `extra` data member
//            auto surface_state = std::any_cast<SurfaceState>(props.extra["SurfaceState"]);
//
//            // Update activity coefficient using the coulombic correction factor, Langmuir book in (10.29) or (10.34)
//            props.ln_g += -z*F*surface_state.psi/(R*T);
//            props.ln_a += -z*F*surface_state.psi/(R*T);
//        }
//    };
//
//    return fn;
//}

} // namespace detail

auto ActivityModelSorptionNoDDL(ActivityModelSorptionParams params) -> ActivityModelGenerator
{
    return [=](const SpeciesList& surface_species)
    {
        return detail::activityModelSorptionNoDDL(surface_species, params);
    };
}

//auto ActivityModelSorptionWithDDL(ActivityModelSorptionParams params) -> ActivityModelGenerator
//{
//    return [=](const SpeciesList& surface_species)
//    {
//        return detail::ActivityModelSorptionWithDDL(surface_species, params);
//    };
//}
//
//auto activityModelSorptionWithEDL(ActivityModelSorptionParams params) -> ActivityModelGenerator
//{
//    return [=](const SpeciesList& surface_species)
//    {
//        return detail::activityModelSorptionWithEDL(surface_species, params);
//    };
//}
//
//auto ActivityModelEDL(ActivityModelDDLParams params) -> ActivityModelGenerator
//{
//    return [=](const SpeciesList& species)
//    {
//        return detail::activityModelEDL(species, params);
//    };
//}

} // namespace Reaktoro
